apply plugin: "java-library"
apply plugin: "jacoco"

group = "nl.colorize"
version = "2020.4"
sourceCompatibility = "11"
targetCompatibility = "11"
compileJava.options.encoding = "UTF-8"
sourceSets.main.java.srcDirs = ["source"]
sourceSets.main.resources.srcDirs = ["resources"]
sourceSets.test.java.srcDirs = ["test"]

repositories {
    mavenCentral()
    maven {
        url "https://dl.bintray.com/konsoletyper/teavm"
    }
}

dependencies {
    api "nl.colorize:colorize-java-commons:2020.1.13"
    api "args4j:args4j:2.33"
    implementation "com.badlogicgames.gdx:gdx:1.9.11"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:1.9.11"
    implementation "com.badlogicgames.gdx:gdx-platform:1.9.11:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype:1.9.11"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:1.9.11:natives-desktop"
    implementation "org.teavm:teavm:0.7.0-dev-988"
    implementation "org.teavm:teavm-jso:0.7.0-dev-988"
    implementation "org.teavm:teavm-jso-apis:0.7.0-dev-988"
    implementation "org.teavm:teavm-classlib:0.7.0-dev-988"
    implementation "org.teavm:teavm-tooling:0.7.0-dev-988"
    implementation "javazoom:jlayer:1.0.1"
    implementation "org.java-websocket:Java-WebSocket:1.5.1"
    implementation "org.slf4j:slf4j-jdk14:1.7.30"
    testImplementation "org.junit.jupiter:junit-jupiter:5.6.2"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["**/java2d/**", "**/libgdx/**", "**/teavm/**"])
        })
    }
}

task coverage(dependsOn: ["test", "jacocoTestReport"]) {
    doLast {
        def report = file("${buildDir}/reports/jacoco/test/html/index.html").text
        def coverage = report =~ "tfoot.*?ctr2.*?>([\\d.]+%).*?tfoot"
        println "-" * 40
        println "Test coverage: " + coverage[0][1]
    }
}

task transpileDemoApplication2D(type: JavaExec, dependsOn: ["compileJava", "processResources"]) {
    classpath = sourceSets.main.runtimeClasspath
    main = "nl.colorize.multimedialib.tool.TeaVMTranspiler"
    args "-project", "MultimediaLib-TeaVM-Demo", "-resources", "resources", "-renderer", "webgl",
        "-out", "${buildDir}/browserdemo2d", "-main", "nl.colorize.multimedialib.tool.TeaDemo2D"
}

task transpileDemoApplication3D(type: JavaExec, dependsOn: ["compileJava", "processResources"]) {
    classpath = sourceSets.main.runtimeClasspath
    main = "nl.colorize.multimedialib.tool.TeaVMTranspiler"
    args "-project", "MultimediaLib-TeaVM-Demo", "-resources", "resources", "-renderer", "three",
        "-out", "${buildDir}/browserdemo2d", "-main", "nl.colorize.multimedialib.tool.TeaDemo3D"
}

task generateCordovaDemoApplication2D(type: JavaExec, dependsOn: transpileDemoApplication2D) {
    classpath = sourceSets.main.runtimeClasspath
    main = "nl.colorize.multimedialib.tool.CordovaWrapper"
    args "-webapp", "${buildDir}/browserdemo2d", "-out", "${buildDir}/cordova",
         "-appid", "nl.colorize.multimedialib", "-appname", "MultimediaLib-Demo2D",
         "-version", "${version}", "-icon", "resources/icon.png", "-dist", "debug",
         "-buildjson", System.getProperty("user.home") + "/Developer/cordova/build-multimedialib.json"
}
