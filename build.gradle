plugins {
    id "io.freefair.lombok" version "8.0.1"
    id "com.github.node-gradle.node" version "3.5.1"
    id "com.github.ben-manes.versions" version "0.46.0"
    id "nl.colorize.gradle.application" version "2023.6"
}

apply plugin: "java-library"
apply plugin: "jacoco"
apply plugin: "maven-publish"
apply plugin: "signing"

group = "nl.colorize"
version = "2023.2"
sourceCompatibility = "17"
targetCompatibility = "17"
compileJava.options.encoding = "UTF-8"
sourceSets.main.java.srcDirs = ["source"]
sourceSets.main.resources.srcDirs = ["resources"]
sourceSets.test.java.srcDirs = ["test"]

node.download = false
npm_outdated.ignoreExitValue = true

ext.libgdxVersion = "1.11.0"
ext.teavmVersion = "0.8.0-dev-1"

repositories {
    mavenCentral()
    maven {
        url "https://teavm.org/maven/repository"
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    api "nl.colorize:colorize-java-commons:2023.6"

    implementation "com.badlogicgames.gdx:gdx:${libgdxVersion}"
    implementation "com.badlogicgames.gdx:gdx-platform:${libgdxVersion}:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:${libgdxVersion}"
    implementation "com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:${libgdxVersion}"
    implementation "com.badlogicgames.gdx:gdx-freetype:${libgdxVersion}"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:${libgdxVersion}:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-tools:${libgdxVersion}"

    implementation "org.teavm:teavm-jso:${teavmVersion}"
    implementation "org.teavm:teavm-jso-apis:${teavmVersion}"
    implementation "org.teavm:teavm-classlib:${teavmVersion}"
    implementation "org.teavm:teavm-tooling:${teavmVersion}"

    implementation "javazoom:jlayer:1.0.1"
    implementation "org.java-websocket:Java-WebSocket:1.5.3"
    implementation "org.slf4j:slf4j-jdk14:1.7.36"
    implementation "com.github.mgsx-dev.gdx-gltf:gltf:2.1.0"

    testImplementation "org.junit.jupiter:junit-jupiter:5.9.2"
}

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["**/java2d/**", "**/libgdx/**", "**/teavm/**",
                                        "**/pixi/**", "**/three/**", "**/demo/**"])
        })
    }
}

javadoc {
    exclude "nl/colorize/multimedialib/demo/**"
}

macApplicationBundle {
    name = "MultimediaLib Demo Application"
    identifier = "nl.colorize.multimedialib.demo"
    description = "MultimediaLib Demo Application"
    copyright = "Copyright 2023 Colorize"
    bundleVersion = "${version}"
    icon = "resources/colorize-icon.icns"
    applicationCategory = "public.app-category.developer-tools"
    mainClassName = "nl.colorize.multimedialib.demo.DemoLauncher"
}

xcode {
    appId = "multimedialibdemo"
    bundleId = "nl.colorize.multimedialib.demo"
    appName = "MultimediaLib Demo Application"
    appVersion = "${version}"
    icon = "resources/browser/assets/apple-icon.png"
    resourcesDir = "${buildDir}/browserdemo2d"   
}

npmInstall.doLast {
    def jsLibraryFiles = [
        "node_modules/pixi.js/dist/browser/pixi.min.js",
        "node_modules/pixi.js/dist/browser/pixi.min.js.map",
        "node_modules/pixi-heaven/dist/pixi-heaven.umd.js",
        "node_modules/pixi-heaven/dist/pixi-heaven.umd.js.map",
        "node_modules/three/build/three.min.js",
        "node_modules/peerjs/dist/peerjs.min.js",
        "node_modules/peerjs/dist/peerjs.min.js.map"
    ];

    copy {
        from jsLibraryFiles
        into "resources/browser/lib"
    }

    file("resources/browser/lib/js-libraries.txt").text =
        jsLibraryFiles.collect { it.split("/").last() }.join("\n")
}

createApplicationBundle.doLast {
    copy {
        from configurations.runtimeClasspath
        into "${buildDir}/mac/MultimediaLib Demo Application.app/Contents/Java"
    }
}

task coverage(dependsOn: ["test", "jacocoTestReport"]) {
    doLast {
        def report = file("${buildDir}/reports/jacoco/test/html/index.html").text
        def coverage = report =~ "tfoot.*?ctr2.*?>([\\d.]+%).*?tfoot"
        println "-" * 40
        println "Test coverage: " + coverage[0][1]
    }
}

task transpileDemoApplication2D(type: JavaExec, dependsOn: jar) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "nl.colorize.multimedialib.tool.TeaVMTranspilerTool"
    args "--project", "MultimediaLib-TeaVM-Demo",
         "--resources", "resources",
         "--out", "${buildDir}/browserdemo2d",
         "--main", "nl.colorize.multimedialib.demo.TeaDemo2D"
}

task transpileDemoApplication3D(type: JavaExec, dependsOn: jar) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "nl.colorize.multimedialib.tool.TeaVMTranspilerTool"
    args "--project", "MultimediaLib-TeaVM-Demo",
         "--resources", "resources",
         "--out", "${buildDir}/browserdemo2d",
         "--main", "nl.colorize.multimedialib.demo.TeaDemo3D"
}

jar.dependsOn npmInstall
test.dependsOn npmInstall
dependencyUpdates.dependsOn npm_outdated
xcodeGen.dependsOn transpileDemoApplication2D

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "multimedialib"
            from components.java

            pom {
                name = "MultimediaLib"
                description = "Framework for building multimedia applications that support desktop, mobile, and web."
                url = "https://www.clrz.nl"

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                developers {
                    developer {
                        id = "colorize"
                        name = "Colorize"
                        email = "contact@colorize.nl"
                    }
                }

                scm {
                    connection = "scm:git:https://github.com/colorizenl/multimedialib.git"
                    developerConnection = "scm:git:https://github.com/colorizenl/multimedialib.git"
                    url = "https://github.com/colorizenl/multimedialib"
                }
            }
        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUser
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}
