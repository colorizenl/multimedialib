plugins {
    id "com.github.ben-manes.versions" version "0.42.0"
}

apply plugin: "java-library"
apply plugin: "jacoco"

group = "nl.colorize"
version = "2022.1"
sourceCompatibility = "17"
targetCompatibility = "17"
compileJava.options.encoding = "UTF-8"
sourceSets.main.java.srcDirs = ["source"]
sourceSets.main.resources.srcDirs = ["resources"]
sourceSets.test.java.srcDirs = ["test"]
ext.libgdxVersion = "1.11.0"
ext.teavmVersion = "0.7.2"

repositories {
    mavenCentral()
    maven {
        // url "https://teavm.org/maven/repository"
        url "https://maven.pkg.github.com/colorizenl/teavm"
        credentials {
            username githubPackagesOwner
            password githubPackagesToken
        }
    }
    maven {
        url "https://jitpack.io"
    }
}

dependencies {
    api "nl.colorize:colorize-java-commons:2022.9"

    implementation "com.badlogicgames.gdx:gdx:${libgdxVersion}"
    implementation "com.badlogicgames.gdx:gdx-platform:${libgdxVersion}:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:${libgdxVersion}"
    implementation "com.badlogicgames.gdx:gdx-lwjgl3-glfw-awt-macos:${libgdxVersion}"
    implementation "com.badlogicgames.gdx:gdx-freetype:${libgdxVersion}"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:${libgdxVersion}:natives-desktop"

    implementation "org.teavm:teavm:${teavmVersion}"
    implementation "org.teavm:teavm-jso:${teavmVersion}"
    implementation "org.teavm:teavm-jso-apis:${teavmVersion}"
    implementation "org.teavm:teavm-classlib:${teavmVersion}"
    implementation "org.teavm:teavm-tooling:${teavmVersion}"

    implementation "javazoom:jlayer:1.0.1"
    implementation "org.java-websocket:Java-WebSocket:1.5.3"
    implementation "org.slf4j:slf4j-jdk14:1.7.36"
    implementation "com.github.mgsx-dev.gdx-gltf:gltf:1.0.0"

    testImplementation "org.junit.jupiter:junit-jupiter:5.9.0"
}

test {
    useJUnitPlatform()
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["**/java2d/**", "**/libgdx/**", "**/teavm/**", "**/demo/**"])
        })
    }
}

task coverage(dependsOn: ["test", "jacocoTestReport"]) {
    doLast {
        def report = file("${buildDir}/reports/jacoco/test/html/index.html").text
        def coverage = report =~ "tfoot.*?ctr2.*?>([\\d.]+%).*?tfoot"
        println "-" * 40
        println "Test coverage: " + coverage[0][1]
    }
}

task transpileDemoApplication2D(type: JavaExec, dependsOn: ["compileJava", "processResources"]) {
    classpath = sourceSets.main.runtimeClasspath
    main = "nl.colorize.multimedialib.tool.TeaVMTranspilerTool"
    args "--project", "MultimediaLib-TeaVM-Demo",
         "--resources", "resources",
         "--out", "${buildDir}/browserdemo2d",
         "--main", "nl.colorize.multimedialib.demo.TeaDemo2D"
}

task transpileDemoApplication3D(type: JavaExec, dependsOn: ["compileJava", "processResources"]) {
    classpath = sourceSets.main.runtimeClasspath
    main = "nl.colorize.multimedialib.tool.TeaVMTranspilerTool"
    args "--project", "MultimediaLib-TeaVM-Demo",
         "--resources", "resources",
         "--out", "${buildDir}/browserdemo2d",
         "--main", "nl.colorize.multimedialib.demo.TeaDemo3D"
}
